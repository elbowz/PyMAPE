{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Distributed and decentralized MonitorAnalyzePlanExecute-Knowledge loops framework Framework to support the development and deployment of Autonomous (Self-Adaptive) Systems Source Code : https://github.com/elbowz/PyMAPE Documentation : https://elbowz.github.io/PyMAPE Key features \u00b6 CONTAINMENT Reuse, modularity and isolation of MAPE components as first-class entity . COMMUNICATION INTERFACE (STANDARDIZATION) Shared interface between components that allow stream communication, filtering, pre/post processing, data exchange communication and routing. DISTRIBUTION Multi-device distribution of MAPE loops and components. DECENTRALIZED PATTERNS Flat p2p and/or hierarchical architectures of loops and components with concerns separation. Allowing runtime pattern reconfiguration (stopping/starting, (un)linking, adding/removing). NETWORK COMMUNICATION PARADIGMS Different paradigms (blackboard, direct message) and protocols for various patterns interactions. STATE / KNOWLEDGE Distributed multi-scope (global, level, loop) Knowledge with partitioning and/or (full/partial async) replication. Tip If you already know what is a Self-Adaptive system, a MAPE-K loop and related patterns: Getting Started","title":"Home"},{"location":"#key-features","text":"CONTAINMENT Reuse, modularity and isolation of MAPE components as first-class entity . COMMUNICATION INTERFACE (STANDARDIZATION) Shared interface between components that allow stream communication, filtering, pre/post processing, data exchange communication and routing. DISTRIBUTION Multi-device distribution of MAPE loops and components. DECENTRALIZED PATTERNS Flat p2p and/or hierarchical architectures of loops and components with concerns separation. Allowing runtime pattern reconfiguration (stopping/starting, (un)linking, adding/removing). NETWORK COMMUNICATION PARADIGMS Different paradigms (blackboard, direct message) and protocols for various patterns interactions. STATE / KNOWLEDGE Distributed multi-scope (global, level, loop) Knowledge with partitioning and/or (full/partial async) replication. Tip If you already know what is a Self-Adaptive system, a MAPE-K loop and related patterns: Getting Started","title":"Key features"},{"location":"concepts/","text":"Self-Adaptive System \u00b6 A Self-Adaptive system (SAS) is able to automatically modify itself in response to changes in its operating environment 1 . The \"self\" prefix indicates that the systems decide autonomously (i.e. without or with minimal interference) how to adapt changes in their contexts. While some self-adaptive system may be able to function without any human intervention, guidance in the form of higher-level goals is useful and realized in many systems. MAPE-K loop \u00b6 A system could be made Self-Adaptive by adding sensors to monitor its runtime state, actuators to change it at runtime, and a separate reasoning mechanism to decide when it is appropriate to adapt the system, and how best to do so. This was famously referred to as the MAPE-K loop, or Monitor-Analyze-Plan-Execute using a shared base of Knowledge 2 . This architecture exposes explicitly the concept of feedback control loop and indentify the components and interfaces. Monitor Monitor the managed system and its context, filter the collected data and store relevant events in Knowledge. Analyze Explore the data, comparing it with known patterns, identifying any symptoms and saving them in the Knowledge as needed. Plan Interprets symptoms and devises a plan to achieve adaptation (or goal), usually according to guidelines and strategies. Execute Provides the control mechanisms to ensure the execution of the plan on the managed system. Knowledge Contains managed system information that can be shared among all MAPE components. It contains all the knowledge useful for the loop (eg. representation, policies to follow, metrics for evaluation, specific inference rules for each task, history, adaptation strategies, system topology, etc). Distributed and Decentralized \u00b6 When systems are large, complex, and heterogeneous, a single MAPE-K loop may not be sufficient for managing adaptation. In such cases, multiple MAPE-K loops may be employed that manage different parts of the system. In self-adaptive systems with multiple loops, the functions for monitoring, analyzing, planning, and effecting may be made by multiple components that coordinate with one another. That is, the functions may be decentralized throughout the multiple MAPE-K loops distributed on different nodes. 3 Different patterns of interacting control loops have been used in practice by centralizing and decentralizing the functions of self-adaption in different ways. Info Further and deeply information about different patterns related to decentralized and distributed system can be found in the paper \"On Patterns for Decentralized Control in Self-Adaptive Systems\", Danny Weyns \"A survey on engineering approaches for self-adaptive systems\" , C. Krupitzer, F. M. Roth, S. VanSyckel, G. Schiele, and C. Becker \u21a9 \"An architectural blueprint for autonomic computing\" , IBM White Paper, vol. 31, no. 2006 \u21a9 \"On Patterns for Decentralized Control in Self-Adaptive Systems\" , D. Weyns, B. Schmerl, V. Grassi, S. Malek, R. Mirandola, C. Prehofer, J. Wuttke, J. Andersson, H. Giese, and K. M. G\u00f6schka \u21a9","title":"Concepts and Terminology"},{"location":"concepts/#self-adaptive-system","text":"A Self-Adaptive system (SAS) is able to automatically modify itself in response to changes in its operating environment 1 . The \"self\" prefix indicates that the systems decide autonomously (i.e. without or with minimal interference) how to adapt changes in their contexts. While some self-adaptive system may be able to function without any human intervention, guidance in the form of higher-level goals is useful and realized in many systems.","title":"Self-Adaptive System"},{"location":"concepts/#mape-k-loop","text":"A system could be made Self-Adaptive by adding sensors to monitor its runtime state, actuators to change it at runtime, and a separate reasoning mechanism to decide when it is appropriate to adapt the system, and how best to do so. This was famously referred to as the MAPE-K loop, or Monitor-Analyze-Plan-Execute using a shared base of Knowledge 2 . This architecture exposes explicitly the concept of feedback control loop and indentify the components and interfaces. Monitor Monitor the managed system and its context, filter the collected data and store relevant events in Knowledge. Analyze Explore the data, comparing it with known patterns, identifying any symptoms and saving them in the Knowledge as needed. Plan Interprets symptoms and devises a plan to achieve adaptation (or goal), usually according to guidelines and strategies. Execute Provides the control mechanisms to ensure the execution of the plan on the managed system. Knowledge Contains managed system information that can be shared among all MAPE components. It contains all the knowledge useful for the loop (eg. representation, policies to follow, metrics for evaluation, specific inference rules for each task, history, adaptation strategies, system topology, etc).","title":"MAPE-K loop"},{"location":"concepts/#distributed-and-decentralized","text":"When systems are large, complex, and heterogeneous, a single MAPE-K loop may not be sufficient for managing adaptation. In such cases, multiple MAPE-K loops may be employed that manage different parts of the system. In self-adaptive systems with multiple loops, the functions for monitoring, analyzing, planning, and effecting may be made by multiple components that coordinate with one another. That is, the functions may be decentralized throughout the multiple MAPE-K loops distributed on different nodes. 3 Different patterns of interacting control loops have been used in practice by centralizing and decentralizing the functions of self-adaption in different ways. Info Further and deeply information about different patterns related to decentralized and distributed system can be found in the paper \"On Patterns for Decentralized Control in Self-Adaptive Systems\", Danny Weyns \"A survey on engineering approaches for self-adaptive systems\" , C. Krupitzer, F. M. Roth, S. VanSyckel, G. Schiele, and C. Becker \u21a9 \"An architectural blueprint for autonomic computing\" , IBM White Paper, vol. 31, no. 2006 \u21a9 \"On Patterns for Decentralized Control in Self-Adaptive Systems\" , D. Weyns, B. Schmerl, V. Grassi, S. Malek, R. Mirandola, C. Prehofer, J. Wuttke, J. Andersson, H. Giese, and K. M. G\u00f6schka \u21a9","title":"Distributed and Decentralized"},{"location":"getting-started/","text":"PyMAPE \u00b6 Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. $ pip install fastapi ---> 100% Come fa # >>> $ ecco un custom prompt // sadasd $ a me si dai sdsd Phasellus posuere in sem ut cursus (1) Lorem ipsum dolor sit amet, (2) consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. I'm an annotation! I'm an annotation as well! Highlight InlineHilite SuperFences Snippets sacas","title":"Installation"},{"location":"getting-started/#pymape","text":"","title":"PyMAPE"},{"location":"getting-started/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"getting-started/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. $ pip install fastapi ---> 100% Come fa # >>> $ ecco un custom prompt // sadasd $ a me si dai sdsd Phasellus posuere in sem ut cursus (1) Lorem ipsum dolor sit amet, (2) consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. I'm an annotation! I'm an annotation as well! Highlight InlineHilite SuperFences Snippets sacas","title":"Project layout"},{"location":"typography/","text":"Decentralized Monitor Analyze Plan Execute Knowledge loops Software framework to support the development and deployment of Autonomous (Self-Adaptive) Systems Getting Started \u00b6 Install \u00b6 pip install pymape See Examples for play with some MAPE-K patterns. Install for Developers and Contributors \u00b6 git clone https://github.com/elbowz/PyMAPE.git cd PyMAPE poetry install note: you need to have already installed poetry Then use poetry shell and/or poetry run (eg. poetry run examples/coordinated-ambulance.py --speed 80 ) to exec your script inside the development environment. First loop (Ambulance) \u00b6 import mape from mape.loop import Loop \"\"\" MAPE Loop and elements definition \"\"\" loop = Loop ( uid = 'ambulance_emergency' ) @loop . monitor def detect ( item , on_next , self ): if 'speed_limit' in item : # Local volatile knowledge self . loop . k . speed_limit = item [ 'speed_limit' ] elif 'emergency_detect' in item : on_next ( item [ 'emergency_detect' ]) @loop . plan ( ops_in = ops . distinct_until_changed ()) async def policy ( emergency , on_next , self ): if emergency is True : self . last_speed_limit = self . loop . k . speed_limit new_speed = max ( self . last_speed_limit , self . emergency_speed ) on_next ({ 'speed' : new_speed }) on_next ({ 'siren' : True }) else : on_next ({ 'speed' : self . last_speed_limit }) on_next ({ 'siren' : False }) policy . emergency_speed = 160 @loop . execute def exec ( item : dict , on_next ): if 'speed' in item : ambulance . speed_limit = item [ 'speed' ] if 'siren' in item : ambulance . siren = item [ 'siren' ] for element in loop : element . debug ( Element . Debug . IN ) \"\"\" MAPE Elements connection \"\"\" detect . subscribe ( policy ) policy . subscribe ( exec ) # (1) # Starting monitor... detect . start () I'm a code annotation! I can contain code , formatted text , images, ... basically anything that can be written in Markdown. The range () function is used to generate a sequence of numbers. The HTML specification is maintained by the W3C . Hover me Traversing \u00b6 # Iterate over loops and element for loop in mape . app : logger . debug ( f \"* { loop . uid } \" ) for element in loop : logger . debug ( f \" - { element . uid } \" ) # Get all Execute elements [ element for element in loop_obj if isinstance ( element , Execute )] # Different access way to loop/element through dot-notation (path) mape . app . loop_uid . element_uid mape . app [ 'loop_uid.element_uid' ] 8.0.0 \u00b7 Feature flag Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. (1) Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa (2). I'm an annotation! I'm an annotation as well! If you already know what is a Self-Adaptive system and a MAPE-K loop: Getting Started Tab 1 Tab 2 # Iterate over loops and element for loop in mape . app : logger . debug ( f \"* { loop . uid } \" ) for element in loop : logger . debug ( f \" - { element . uid } \" ) # Get all Execute elements [ element for element in loop_obj if isinstance ( element , Execute )] # Different access way to loop/element through dot-notation (path) mape . app . loop_uid . element_uid mape . app [ 'loop_uid.element_uid' ] Phasellus posuere in sem ut cursus (1) casazzo \u00b6 Docs \u00b6 Slides \u00b6 Introduction to PyMAPE with examples Examples \u00b6 Implementation of the 5 decentralized (and distributed) MAPE patterns described in the paper: \"On Patterns for Decentralized Control in Self-Adaptive Systems\", Danny Weyns Ambulance-Car Emergency (Information Sharing and Coordinated Control) Average Speed Enforcement (Master/Slave) Dynamic Carriageway (Regional Planning) Cruise Control with Distance Hold (Hierarchical Control) If you want try some examples (path examples/ ), refer to section # CLI EXAMPLES inside the source code of each one. The examples need furthers requirements, please see pyproject.toml or use poetry to install them . You also need a Redis and InfluxDB instance running, for example: docker run --name mape-redis -p 6379 :6379 \\ -v $( pwd ) /docker/redis:/usr/local/etc/redis \\ --rm redis redis-server /usr/local/etc/redis/redis.conf docker run --name mape-influxdb -p 8086 :8086 \\ -v $( pwd ) /docker/influxdb/data:/var/lib/influxdb2 \\ -v $( pwd ) /docker/influxdb/conf:/etc/influxdb2 \\ -e DOCKER_INFLUXDB_INIT_MODE = setup \\ -e DOCKER_INFLUXDB_INIT_USERNAME = user \\ -e DOCKER_INFLUXDB_INIT_PASSWORD = qwerty123456 \\ -e DOCKER_INFLUXDB_INIT_ORG = univaq \\ -e DOCKER_INFLUXDB_INIT_BUCKET = mape \\ -e DOCKER_INFLUXDB_INIT_RETENTION = 1w \\ -e DOCKER_INFLUXDB_INIT_ADMIN_TOKEN = <GENERATE_OR_TAKE_FROM_CONFIG_YAML> \\ --rm influxdb:2.0 See source for more information.","title":"Typography"},{"location":"typography/#getting-started","text":"","title":"Getting Started"},{"location":"typography/#install","text":"pip install pymape See Examples for play with some MAPE-K patterns.","title":"Install"},{"location":"typography/#install-for-developers-and-contributors","text":"git clone https://github.com/elbowz/PyMAPE.git cd PyMAPE poetry install note: you need to have already installed poetry Then use poetry shell and/or poetry run (eg. poetry run examples/coordinated-ambulance.py --speed 80 ) to exec your script inside the development environment.","title":"Install for Developers and Contributors"},{"location":"typography/#first-loop-ambulance","text":"import mape from mape.loop import Loop \"\"\" MAPE Loop and elements definition \"\"\" loop = Loop ( uid = 'ambulance_emergency' ) @loop . monitor def detect ( item , on_next , self ): if 'speed_limit' in item : # Local volatile knowledge self . loop . k . speed_limit = item [ 'speed_limit' ] elif 'emergency_detect' in item : on_next ( item [ 'emergency_detect' ]) @loop . plan ( ops_in = ops . distinct_until_changed ()) async def policy ( emergency , on_next , self ): if emergency is True : self . last_speed_limit = self . loop . k . speed_limit new_speed = max ( self . last_speed_limit , self . emergency_speed ) on_next ({ 'speed' : new_speed }) on_next ({ 'siren' : True }) else : on_next ({ 'speed' : self . last_speed_limit }) on_next ({ 'siren' : False }) policy . emergency_speed = 160 @loop . execute def exec ( item : dict , on_next ): if 'speed' in item : ambulance . speed_limit = item [ 'speed' ] if 'siren' in item : ambulance . siren = item [ 'siren' ] for element in loop : element . debug ( Element . Debug . IN ) \"\"\" MAPE Elements connection \"\"\" detect . subscribe ( policy ) policy . subscribe ( exec ) # (1) # Starting monitor... detect . start () I'm a code annotation! I can contain code , formatted text , images, ... basically anything that can be written in Markdown. The range () function is used to generate a sequence of numbers. The HTML specification is maintained by the W3C . Hover me","title":"First loop (Ambulance)"},{"location":"typography/#traversing","text":"# Iterate over loops and element for loop in mape . app : logger . debug ( f \"* { loop . uid } \" ) for element in loop : logger . debug ( f \" - { element . uid } \" ) # Get all Execute elements [ element for element in loop_obj if isinstance ( element , Execute )] # Different access way to loop/element through dot-notation (path) mape . app . loop_uid . element_uid mape . app [ 'loop_uid.element_uid' ] 8.0.0 \u00b7 Feature flag Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. (1) Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa (2). I'm an annotation! I'm an annotation as well! If you already know what is a Self-Adaptive system and a MAPE-K loop: Getting Started Tab 1 Tab 2 # Iterate over loops and element for loop in mape . app : logger . debug ( f \"* { loop . uid } \" ) for element in loop : logger . debug ( f \" - { element . uid } \" ) # Get all Execute elements [ element for element in loop_obj if isinstance ( element , Execute )] # Different access way to loop/element through dot-notation (path) mape . app . loop_uid . element_uid mape . app [ 'loop_uid.element_uid' ] Phasellus posuere in sem ut cursus (1)","title":"Traversing"},{"location":"typography/#casazzo","text":"","title":"casazzo"},{"location":"typography/#docs","text":"","title":"Docs"},{"location":"typography/#slides","text":"Introduction to PyMAPE with examples","title":"Slides"},{"location":"typography/#examples","text":"Implementation of the 5 decentralized (and distributed) MAPE patterns described in the paper: \"On Patterns for Decentralized Control in Self-Adaptive Systems\", Danny Weyns Ambulance-Car Emergency (Information Sharing and Coordinated Control) Average Speed Enforcement (Master/Slave) Dynamic Carriageway (Regional Planning) Cruise Control with Distance Hold (Hierarchical Control) If you want try some examples (path examples/ ), refer to section # CLI EXAMPLES inside the source code of each one. The examples need furthers requirements, please see pyproject.toml or use poetry to install them . You also need a Redis and InfluxDB instance running, for example: docker run --name mape-redis -p 6379 :6379 \\ -v $( pwd ) /docker/redis:/usr/local/etc/redis \\ --rm redis redis-server /usr/local/etc/redis/redis.conf docker run --name mape-influxdb -p 8086 :8086 \\ -v $( pwd ) /docker/influxdb/data:/var/lib/influxdb2 \\ -v $( pwd ) /docker/influxdb/conf:/etc/influxdb2 \\ -e DOCKER_INFLUXDB_INIT_MODE = setup \\ -e DOCKER_INFLUXDB_INIT_USERNAME = user \\ -e DOCKER_INFLUXDB_INIT_PASSWORD = qwerty123456 \\ -e DOCKER_INFLUXDB_INIT_ORG = univaq \\ -e DOCKER_INFLUXDB_INIT_BUCKET = mape \\ -e DOCKER_INFLUXDB_INIT_RETENTION = 1w \\ -e DOCKER_INFLUXDB_INIT_ADMIN_TOKEN = <GENERATE_OR_TAKE_FROM_CONFIG_YAML> \\ --rm influxdb:2.0 See source for more information.","title":"Examples"}]}